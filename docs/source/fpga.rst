FPGA Implementation
=========


This is FPGA implementation.



在RISC-V处理器架构中，通常存在多个引导加载程序（Bootloader）阶段，包括零阶段引导加载程序（Zero Stage Bootloader）和一阶段引导加载程序（First Stage Bootloader），它们各自扮演不同的角色：

零阶段引导加载程序（Zero Stage Bootloader）：

零阶段引导加载程序通常是在处理器复位后直接运行的一小段代码。
它通常位于芯片内部的BootROM中，因为它需要非常快速地执行。
零阶段引导加载程序的主要任务是进行基本的硬件初始化和设置，以准备进一步的引导加载过程。
它可能会初始化内存控制器、设置栈指针、配置中断等，以便后续的引导加载程序能够正常运行。
一阶段引导加载程序（First Stage Bootloader）：

一阶段引导加载程序位于零阶段引导加载程序之后运行。
它通常位于可写的存储介质（如Flash存储器）中，而不是芯片内部的BootROM。
一阶段引导加载程序的主要任务是从存储介质中加载更复杂的引导加载程序，如二阶段引导加载程序（Second Stage Bootloader）或操作系统内核，到内存中并开始执行。
它可能还会进行更高级的硬件初始化，如初始化外部设备、加载驱动程序等。
这两个阶段的引导加载程序通常是为了实现引导过程的分层和模块化。零阶段引导加载程序是最基本的初始化步骤，它保证了处理器在运行任何复杂引导加载程序之前处于一个合适的状态。一阶段引导加载程序进一步构建在此基础上，负责加载更多的软件组件，最终启动操作系统或主应用程序。

一阶段引导加载程序通常被称为引导加载程序（Bootloader），而零阶段引导加载程序则是引导加载程序的一部分，负责最基本的硬件设置。在复杂的嵌入式系统中，可能还存在更多的引导加载程序阶段，以实现更多的功能和复杂性。


"Bare-metal" 是一个术语，通常用于描述在嵌入式系统或计算机上运行的软件，该软件直接在硬件上运行，没有操作系统或其他软件层介入。Bare-metal软件是针对特定硬件平台编写的，它与硬件之间的交互是直接的，没有中间层。

以下是关于"Bare-metal"的一些重要特点和概念：

1. **无操作系统**：Bare-metal软件不依赖于操作系统。它直接管理硬件资源，包括处理器、内存、外设等，而不使用操作系统提供的抽象和服务。

2. **硬件控制**：Bare-metal软件具有对硬件的细粒度控制。它可以直接操作寄存器、配置外设、设置时钟和中断等，以满足特定应用程序的需求。

3. **性能和效率**：由于没有操作系统的开销，Bare-metal软件通常能够实现更高的性能和更低的延迟。这对于一些实时性要求高的应用程序非常重要。

4. **嵌入式系统**：Bare-metal常用于嵌入式系统，如微控制器、嵌入式处理器等。这些系统通常需要小型、高效、快速响应的软件，因此Bare-metal非常适用。

5. **应用范围**：Bare-metal软件可用于各种应用，包括嵌入式控制、传感器数据采集、嵌入式网络设备、实时控制系统等。

6. **开发挑战**：编写Bare-metal软件可能更具挑战性，因为开发者需要直接处理硬件细节，没有操作系统提供的抽象和便利。

总之，"Bare-metal"是指直接在硬件上运行的软件，它不依赖于操作系统，并且直接管理硬件资源。这种方式常用于嵌入式系统和一些对性能和实时性要求高的应用程序中。

Bootloader在RISC-V CPU上运行Bare-metal软件时充当了初始化和准备阶段的角色。它负责确保硬件适当地配置和Bare-metal软件正确加载到内存中。一旦这些任务完成，Bootloader将控制权转交给Bare-metal软件，使其能够在已准备好的硬件环境中执行。

二进制文件（.bin）通常是一个可执行文件，它包含了用于直接在硬件或操作系统上执行的机器代码。这些文件通常由编译器从源代码生成，然后可以直接被加载和执行。

镜像文件（.img）通常是一个存储设备或文件系统的完整二进制复制。它包含了存储设备的所有内容，包括文件系统、文件、目录和元数据。镜像文件通常用于备份、恢复或在不同的设备或系统之间复制数据。在嵌入式系统开发中，镜像文件通常包含了完整的固件，包括引导加载程序、内核、应用程序和文件系统。


设备树（Device Tree）是一种数据结构，用于描述硬件设备的组成和配置信息，特别是在嵌入式系统中。设备树文件通常用于在没有硬件发现机制的系统中，向操作系统提供硬件设备的信息。

设备树文件通常有两种格式：

DTS（Device Tree Source）：这是设备树的源文件，它是一个文本文件，描述了硬件设备的层次结构和属性。DTS 文件可以通过设备树编译器（DTC）编译成 DTB 文件。

DTB（Device Tree Blob）：这是设备树的二进制格式，通常用于在系统引导时，向内核提供硬件设备的信息。

在裸机（bare-metal）环境中，RISC-V CPU 通常不需要设备树（Device Tree）。设备树主要用于操作系统，以便在启动时了解硬件的配置和布局，从而能够正确地初始化和管理硬件设备。

在裸机环境中，硬件的配置通常是固定的，而且由程序直接管理，因此不需要设备树来描述硬件的配置。相反，硬件的配置通常会直接编码到程序中，或者通过硬件寄存器或其他机制来获取。

C标准库中有一个exit函数，它会在程序执行完之后自动调用。




.. note::

   This section is under development.
