SoC Intergration
=======

.. contents:: Table of Contents


Overview
--------------

简要来说，计算机由存储器、运算器、控制器、输入设备和输出设备五部分组成， 其中运算器和控制器合称为中央处理器 (Central Processing Processor)，也就是CPU。 
冯·诺依曼结构以运算器为中心，输入输出设备与存储器之间的数据传送都需要经过运算器。
SoC是一种单片计算机系统解决方案，在单个芯片上集成了处理器、内存控制器、GPU以及硬盘、USB、网络等IO接口，用户在搭建计算机系统时只需要使用单个主要芯片即可。 
目前SoC主要应用于移动处理器和工业控制领域，相比于多片结构，单片SoC的集成度更高，功耗控制方法更加灵活，有利于系统的小型化和低功耗设计。 
不过，由于全系统都在一个芯片上实现，系统的扩展性没有多片结构好，升级的开销也更大。


Components
--------------

CLINT
^^^^^^^^^^^^^^^

全称为 Core-local Interrupt Controller，是 RISC-V 架构中用于处理本地中断的一个组件。
CLINT 主要处理两种类型的中断：软件中断（Software Interrupts）和定时器中断（Timer Interrupts）。

CLINT 中有三个寄存器被作为 slave 映射到总线地址上，分别为 ``msip``、``mtimecmp`` 和 ``mtime``。

- ``msip``：Machine mode software interrupt（IPI，inter-process interrupt）。一个由软件设置来触发中断的寄存器，可以用来置位 ``mip`` 寄存器中的 ``MSIP`` 位。
- ``mtimecmp``：Machine mode timer compare register。机器模式下的定时器比较寄存器，当 ``mtime`` 寄存器的值大于或等于 ``mtimecmp`` 寄存器的值时，就会产生一个定时器中断。这个中断会一直保持，直到通过写入 ``mtimecmp`` 寄存器来清除它。只有当中断被启用并且 ``mie`` 寄存器中的 ``MTIE`` 位被设置时，这个中断才会被接收。
- ``mtime``：Timer register。这是一个 64 位的计数器，通常用于生成定时器中断。

.. attention::

   CLINT 对 CPU 发起的中断不会经过总线。

.. note::

   ``mip`` 和 ``mie`` 都是 CSR，前者包含待处理中断的信息，后者包含中断使能位。

PLIC
^^^^^^^^^^^^^^^^

全称为 Platform-Level Interrupt Controller，它将全局中断源（通常是 I/O 设备）连接到中断目标（通常是 CPU）。


Intergration
--------------

Memory Map
^^^^^^^^^^^^

CPU 通过地址访问外围设备，因此需要给每个设备分配地址空间和属性，这个过程称为地址映射（memory mapping）。

下表是 CVA6 APU 的地址映射。


+---------------+----------------+------------------+----------------+
| Base          | Length         | Attributes       | Description    |
+===============+================+==================+================+
| 0x0000_0000   | 0x1000         | EX               | Debug Module   |
+---------------+----------------+------------------+----------------+
| 0x0001_0000   | 0x10000        | EX               | ROM            |
+---------------+----------------+------------------+----------------+
| 0x0200_0000   | 0xC0000        |                  | CLINT          |
+---------------+----------------+------------------+----------------+
| 0x0C00_0000   | 0x400_0000     |                  | PLIC           |
+---------------+----------------+------------------+----------------+
| 0x1000_0000   | 0x1000         |                  | UART           |
+---------------+----------------+------------------+----------------+
| 0x1800_0000   | 0x1000         |                  | Timer          |
+---------------+----------------+------------------+----------------+
| 0x2000_0000   | 0x80_0000      |                  | SPI            |
+---------------+----------------+------------------+----------------+
| 0x3000_0000   | 0x10000        |                  | Ethernet       |
+---------------+----------------+------------------+----------------+
| 0x4000_0000   | 0x1000         |                  | GPIO           |
+---------------+----------------+------------------+----------------+
| 0x8000_0000   | 0x4000_0000    | EX, NI, C        | DRAM           |
+---------------+----------------+------------------+----------------+

每个映射的地址可以有不同的属性（attribute），这些属性定义了对该地址空间的访问特性和行为。

- EX (Executable)：指示相应的内存区域可以用于存放可执行代码。当 CPU 尝试执行存储在具有此属性的地址区域中的指令时，如果该区域被标记为可执行（EX），这个操作是合法的。如果一个区域不是可执行的，尝试在这个区域执行代码将触发异常，这是一种安全特性，用于防止例如缓冲区溢出攻击。
- NI (Non-Idempotent)：非幂等属性意味着对同一个地址的多次读取或写入操作可能会产生不同的结果。这个属性通常用于映射到特殊硬件设备的内存区域，例如 I/O 设备。在这些区域，每次访问可能都会改变设备的状态或触发某种操作，因此相同的操作不会总是产生相同的结果。例如，从一个设备状态寄存器读取可能会清除该寄存器，或者向控制寄存器写入可能会触发硬件操作。
- C (Cached)：这个属性指示相应的内存区域可以被缓存。启用缓存可以显著提高数据访问速度，因为缓存是一种更快的存储。在许多系统中，CPU 会将频繁访问的数据存储在缓存中。然而，并不是所有的内存区域都适合缓存，特别是映射到外设的区域，这些区域可能需要直接访问以保证数据的实时性和一致性。




.. note::

   This section is under development.
